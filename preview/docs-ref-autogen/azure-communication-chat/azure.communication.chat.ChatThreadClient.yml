### YamlMime:PythonClass
uid: azure.communication.chat.ChatThreadClient
name: ChatThreadClient
fullName: azure.communication.chat.ChatThreadClient
module: azure.communication.chat
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService Chat gateway.

  Instances of this class is normally created by ChatClient.create_chat_thread()


  This client provides operations to add participant to chat thread, remove participant
  from

  chat thread, send message, delete message, update message, send typing notifications,

  send and list read receipt'
constructor:
  syntax: ChatThreadClient(endpoint, credential, thread_id, **kwargs)
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: 'The credentials with which to authenticate. The value contains a
      User

      Access Token'
    isRequired: true
    types:
    - <xref:CommunicationTokenCredential>
  - name: thread_id
    description: The unique thread id.
    isRequired: true
    types:
    - <xref:str>
variables:
- description: Chat thread id.
  name: thread_id
  types:
  - <xref:str>
examples:
- "Creating the ChatThreadClient.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b5\\\
  \\samples\\\\chat_thread_client_sample.py\", \"xml:space\": \"preserve\", \"language\"\
  : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from datetime import datetime\n   from azure.communication.identity\
  \ import CommunicationUserIdentifier\n   from azure.communication.identity._shared.user_credential\
  \ import CommunicationTokenCredential\n   from azure.communication.chat._shared.user_token_refresh_options\
  \ import CommunicationTokenRefreshOptions\n   from azure.communication.chat import\
  \ (\n       ChatClient,\n       ChatThreadParticipant\n   )\n   # retrieve `token`\
  \ using CommunicationIdentityClient.get_token method\n   # set `endpoint` to ACS\
  \ service endpoint\n   # create `user` using CommunicationIdentityClient.create_user\
  \ method for new users;\n   # else for existing users set `user` = CommunicationUserIdentifier(some_user_id)\n\
  \   refresh_options = CommunicationTokenRefreshOptions(token)\n   chat_client =\
  \ ChatClient(endpoint, CommunicationTokenCredential(refresh_options))\n   topic\
  \ = \"test topic\"\n   participants = [ChatThreadParticipant(\n       user=user,\n\
  \       display_name='name',\n       share_history_time=datetime.utcnow()\n   )]\n\
  \   create_chat_thread_result = chat_client.create_chat_thread(topic, thread_participants=participants)\n\
  \   chat_thread_client = chat_client.get_chat_thread_client(create_chat_thread_result.chat_thread.id)\n\
  \n   ````\n"
methods:
- uid: azure.communication.chat.ChatThreadClient.add_participant
  name: add_participant
  summary: 'Adds single thread participant to a thread. If participant already exist,
    no change occurs.


    If participant is added successfully, a tuple of (None, None) is expected.

    Failure to add participant to thread returns tuple of (chat_thread_participant,
    communication_error).'
  signature: add_participant(thread_participant, **kwargs)
  parameters:
  - name: thread_participant
    description: Required. Single thread participant to be added to the thread.
    isRequired: true
    types:
    - <xref:azure.communication.chat.ChatThreadParticipant>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Adding single participant to chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatThreadParticipant\n   from datetime import datetime\n\n   def decide_to_retry(error):\n\
    \       \"\"\"\n       Custom logic to decide whether to retry to add or not\n\
    \       \"\"\"\n       return True\n\n   # set `thread_id` to an existing thread\
    \ id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # create `user` using CommunicationIdentityClient.create_user method for\
    \ new users;\n   # else for existing users set `user` = CommunicationUserIdentifier(some_user_id)\n\
    \   new_chat_thread_participant = ChatThreadParticipant(\n       user=user,\n\
    \       display_name='name',\n       share_history_time=datetime.utcnow())\n\n\
    \   # check if participant has been added successfully\n   try:\n       chat_thread_client.add_participant(new_chat_thread_participant)\n\
    \   except RuntimeError as e:\n       if e is not None and decide_to_retry(error=e):\n\
    \           chat_thread_client.add_participant(new_chat_thread_participant)\n\n\
    \   ````\n"
- uid: azure.communication.chat.ChatThreadClient.add_participants
  name: add_participants
  summary: 'Adds thread participants to a thread. If participants already exist, no
    change occurs.


    If all participants are added successfully, then an empty list is returned;

    otherwise, a list of tuple(chat_thread_participant, communincation_error) is returned,

    of failed participants and its respective error'
  signature: add_participants(thread_participants, **kwargs)
  parameters:
  - name: thread_participants
    description: Required. Thread participants to be added to the thread.
    isRequired: true
    types:
    - <xref:list>[<xref:azure.communication.chat.ChatThreadParticipant>]
  return:
    description: List[Tuple(ChatThreadParticipant, CommunicationError)]
    types:
    - <xref:list>[(<xref:azure.communication.chat.ChatThreadParticipant>, <xref:azure.communication.chat.CommunicationError>)]
  examples:
  - "Adding participants to chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatThreadParticipant\n   from datetime import datetime\n\n   def decide_to_retry(error):\n\
    \       \"\"\"\n       Custom logic to decide whether to retry to add or not\n\
    \       \"\"\"\n       return True\n\n   # set `thread_id` to an existing thread\
    \ id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # create `user` using CommunicationIdentityClient.create_user method for\
    \ new users;\n   # else for existing users set `user` = CommunicationUserIdentifier(some_user_id)\n\
    \   new_participant = ChatThreadParticipant(\n       user=user,\n       display_name='name',\n\
    \       share_history_time=datetime.utcnow())\n\n   # create list containing one\
    \ or more participants\n   thread_participants = [new_participant]\n   result\
    \ = chat_thread_client.add_participants(thread_participants)\n\n   # list of participants\
    \ which were unsuccessful to be added to chat thread\n   retry = [p for p, e in\
    \ result if decide_to_retry(e)]\n   if len(retry) > 0:\n       chat_thread_client.add_participants(retry)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.close
  name: close
  signature: close()
- uid: azure.communication.chat.ChatThreadClient.delete_message
  name: delete_message
  summary: Deletes a message.
  signature: delete_message(message_id, **kwargs)
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Deleting a messages.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   chat_thread_client.delete_message(message_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.get_message
  name: get_message
  summary: Gets a message by id.
  signature: get_message(message_id, **kwargs)
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatMessage
    types:
    - <xref:azure.communication.chat.ChatMessage>
  examples:
  - "Getting a message by message id.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   chat_message = chat_thread_client.get_message(message_id)\n\
    \n   print(\"Message received: ChatMessage: content=\", chat_message.content.message,\
    \ \", id=\", chat_message.id)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.list_messages
  name: list_messages
  summary: 'Gets a list of messages from a thread.



    The timestamp should be in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`.

    :return: An iterator like instance of ChatMessage

    :rtype: ~azure.core.paging.ItemPaged[~azure.communication.chat.ChatMessage]

    :raises: ~azure.core.exceptions.HttpResponseError, ValueError'
  signature: list_messages(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of messages to be returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The earliest point in time to get messages up to.
    types:
    - <xref:datetime.datetime>
  examples:
  - "Listing messages of a chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from datetime\
    \ import datetime, timedelta\n\n   # set `thread_id` to an existing thread id\n\
    \   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   start_time = datetime.utcnow() - timedelta(days=1)\n   chat_messages = chat_thread_client.list_messages(results_per_page=1,\
    \ start_time=start_time)\n\n   print(\"list_messages succeeded with results_per_page\
    \ is 1, and start time is yesterday UTC\")\n   for chat_message_page in chat_messages.by_page():\n\
    \       for chat_message in chat_message_page:\n           print(\"ChatMessage:\
    \ message=\", chat_message.content.message)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.list_participants
  name: list_participants
  summary: Gets the participants of a thread.
  signature: list_participants(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of participants to be returned per page.
    types:
    - <xref:int>
  - name: skip
    description: Skips participants up to a specified position in response.
    types:
    - <xref:int>
  return:
    description: An iterator like instance of ChatThreadParticipant
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.chat.ChatThreadParticipant>]
  examples:
  - "Listing participants of chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   chat_thread_participants = chat_thread_client.list_participants()\n\n   for\
    \ chat_thread_participant_page in chat_thread_participants.by_page():\n      \
    \ for chat_thread_participant in chat_thread_participant_page:\n           print(\"\
    ChatThreadParticipant: \", chat_thread_participant)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.list_read_receipts
  name: list_read_receipts
  summary: Gets read receipts for a thread.
  signature: list_read_receipts(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of chat message read receipts to be returned per
      page.
    types:
    - <xref:int>
  - name: skip
    description: Skips chat message read receipts up to a specified position in response.
    types:
    - <xref:int>
  return:
    description: An iterator like instance of ChatMessageReadReceipt
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.chat.ChatMessageReadReceipt>]
  examples:
  - "Listing read receipts.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   read_receipts = chat_thread_client.list_read_receipts()\n\n   for read_receipt_page\
    \ in read_receipts.by_page():\n       for read_receipt in read_receipt_page:\n\
    \           print(read_receipt)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.remove_participant
  name: remove_participant
  summary: Remove a participant from a thread.
  signature: remove_participant(user, **kwargs)
  parameters:
  - name: user
    description: Required. User identity of the thread participant to remove from
      the thread.
    isRequired: true
    types:
    - <xref:azure.communication.chat.CommunicationUserIdentifier>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Removing participant from chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatThreadParticipant\n   from azure.communication.identity import CommunicationUserIdentifier\n\
    \   from datetime import datetime\n\n   # create 2 new users using CommunicationIdentityClient.create_user\
    \ method\n   user1 = identity_client.create_user()\n   user2 = identity_client.create_user()\n\
    \n   # set `thread_id` to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # add user1 and user2 to chat thread\n   participant1 = ChatThreadParticipant(\n\
    \           user=user1,\n           display_name='Fred Flinstone',\n         \
    \  share_history_time=datetime.utcnow())\n\n   participant2 = ChatThreadParticipant(\n\
    \       user=user2,\n       display_name='Wilma Flinstone',\n       share_history_time=datetime.utcnow())\n\
    \n   thread_participants = [participant1, participant2]\n   chat_thread_client.add_participants(thread_participants)\n\
    \n   # Option 1 : Iterate through all participants, find and delete Fred Flinstone\n\
    \   chat_thread_participants = chat_thread_client.list_participants()\n\n   for\
    \ chat_thread_participant_page in chat_thread_participants.by_page():\n      \
    \ for chat_thread_participant in chat_thread_participant_page:\n           print(\"\
    ChatThreadParticipant: \", chat_thread_participant)\n           if chat_thread_participant.user.identifier\
    \ == user1.identifier:\n               print(\"Found Fred!\")\n              \
    \ chat_thread_client.remove_participant(chat_thread_participant.user)\n      \
    \         print(\"Fred has been removed from the thread...\")\n              \
    \ break\n\n   # Option 2: Directly remove Wilma Flinstone\n   unique_identifier\
    \ = user2.identifier # in real scenario the identifier would need to be retrieved\
    \ from elsewhere\n   chat_thread_client.remove_participant(CommunicationUserIdentifier(unique_identifier))\n\
    \   print(\"Wilma has been removed from the thread...\")\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.send_message
  name: send_message
  summary: "Sends a message to a thread.\n\n\nDefault: ChatMessageType.TEXT\n:type\
    \ chat_message_type: str or ~azure.communication.chat.models.ChatMessageType\n\
    :keyword str sender_display_name: The display name of the message sender. This\
    \ property is used to\n\n\n   populate sender name for push notifications."
  signature: send_message(content, **kwargs)
  return:
    description: str
    types:
    - <xref:str>
  examples:
  - "Sending a message.<!--[!code-python[Main](les\\chat_thread_client_sample.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\26\\\\\
    azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatMessageType\n\n   # set `thread_id` to an existing thread id\n  \
    \ chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # Scenario 1: Send message without specifying chat_message_type\n   send_message_result_id\
    \ = chat_thread_client.send_message(\n       \"Hello! My name is Fred Flinstone\"\
    ,\n       sender_display_name=\"Fred Flinstone\")\n\n   # Scenario 2: Send message\
    \ specifying chat_message_type\n   send_message_result_w_type_id = chat_thread_client.send_message(\n\
    \       \"Hello! My name is Wilma Flinstone\",\n       sender_display_name=\"\
    Wilma Flinstone\",\n       chat_message_type=ChatMessageType.TEXT) # equivalent\
    \ to setting chat_message_type='text'\n\n   # Verify message content\n   print(\"\
    First Message:\", chat_thread_client.get_message(send_message_result_id).content.message)\n\
    \   print(\"Second Message:\", chat_thread_client.get_message(send_message_result_w_type_id).content.message)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.send_read_receipt
  name: send_read_receipt
  summary: Posts a read receipt event to a thread, on behalf of a user.
  signature: send_read_receipt(message_id, **kwargs)
  parameters:
  - name: message_id
    description: Required. Id of the latest message read by current user.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Sending read receipt of a chat message.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   chat_thread_client.send_read_receipt(message_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.send_typing_notification
  name: send_typing_notification
  summary: Posts a typing event to a thread, on behalf of a user.
  signature: send_typing_notification(**kwargs)
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Sending typing notification.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   chat_thread_client.send_typing_notification()\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.update_message
  name: update_message
  summary: Updates a message.
  signature: update_message(message_id, content=None, **kwargs)
  parameters:
  - name: message_id
    description: Required. The message id.
    isRequired: true
    types:
    - <xref:str>
  - name: content
    description: Chat message content.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Updating a sent messages.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   # set `message_id` to an existing message id\n   previous_content = chat_thread_client.get_message(message_id).content.message\n\
    \   content = \"updated content\"\n   chat_thread_client.update_message(message_id,\
    \ content=content)\n\n   current_content = chat_thread_client.get_message(message_id).content.message\n\
    \n   print(\"Chat Message Updated: Previous value: \", previous_content, \", Current\
    \ value: \", current_content)\n\n   ````\n"
- uid: azure.communication.chat.ChatThreadClient.update_topic
  name: update_topic
  summary: Updates a thread's properties.
  signature: update_topic(topic=None, **kwargs)
  parameters:
  - name: topic
    description: 'Thread topic. If topic is not specified, the update will succeeded
      but

      chat thread properties will not be changed.'
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "Updating chat thread.<!--[!code-python[Main](les\\chat_thread_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_thread_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   # set `thread_id`\
    \ to an existing thread id\n   chat_thread = chat_client.get_chat_thread(thread_id=thread_id)\n\
    \   previous_topic = chat_thread.topic\n   chat_thread_client = chat_client.get_chat_thread_client(thread_id=thread_id)\n\
    \n   topic = \"updated thread topic\"\n   chat_thread_client.update_topic(topic=topic)\n\
    \n   chat_thread = chat_client.get_chat_thread(thread_id=thread_id)\n   updated_topic\
    \ = chat_thread.topic\n   print(\"Chat Thread Topic Update: Previous value: \"\
    , previous_topic, \", Current value: \", updated_topic)\n\n   ````\n"
attributes:
- uid: azure.communication.chat.ChatThreadClient.thread_id
  name: thread_id
  summary: Gets the thread id from the client.
  return:
    types:
    - <xref:str>
