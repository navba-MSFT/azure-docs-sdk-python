### YamlMime:PythonClass
uid: azure.communication.chat.ChatClient
name: ChatClient
fullName: azure.communication.chat.ChatClient
module: azure.communication.chat
inheritances:
- builtins.object
summary: 'A client to interact with the AzureCommunicationService Chat gateway.


  This client provides operations to create chat thread, delete chat thread,

  get chat thread by id, list chat threads, create chat thread client.'
constructor:
  syntax: ChatClient(endpoint, credential, **kwargs)
  parameters:
  - name: endpoint
    description: The endpoint of the Azure Communication resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The credentials with which to authenticate.
    isRequired: true
    types:
    - <xref:CommunicationTokenCredential>
examples:
- "Creating the ChatClient from a URL and token.<!--[!code-python[Main](les\\chat_client_sample.py\
  \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
  : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b5\\\
  \\samples\\\\chat_client_sample.py\", \"xml:space\": \"preserve\", \"language\"\
  : \"python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\
  \n````python\n\n   from azure.communication.chat import ChatClient\n   from azure.communication.identity._shared.user_credential\
  \ import CommunicationTokenCredential\n   from azure.communication.chat._shared.user_token_refresh_options\
  \ import CommunicationTokenRefreshOptions\n   refresh_options = CommunicationTokenRefreshOptions(self.token)\n\
  \   chat_client = ChatClient(self.endpoint, CommunicationTokenCredential(refresh_options))\n\
  \n   ````\n"
methods:
- uid: azure.communication.chat.ChatClient.close
  name: close
  signature: close()
- uid: azure.communication.chat.ChatClient.create_chat_thread
  name: create_chat_thread
  summary: Creates a chat thread.
  signature: create_chat_thread(topic, **kwargs)
  parameters:
  - name: topic
    description: Required. The thread topic.
    isRequired: true
    types:
    - <xref:str>
  - name: thread_participants
    description: Optional. Participants to be added to the thread.
    types:
    - <xref:list>[<xref:azure.communication.chat.ChatThreadParticipant>]
  - name: repeatability_request_id
    description: 'Optional. If specified, the client directs that the request is

      repeatable; that is, that the client can make the request multiple times with
      the same

      Repeatability-Request-ID and get back an appropriate response without the server
      executing the

      request multiple times. The value of the Repeatability-Request-ID is an opaque
      string

      representing a client-generated, globally unique for all time, identifier for
      the request. If not

      specified, a new unique id would be generated.'
    types:
    - <xref:str>
  return:
    description: CreateChatThreadResult
    types:
    - <xref:azure.communication.chat.CreateChatThreadResult>
  examples:
  - "Creating ChatThread by creating a new chat thread.<!--[!code-python[Main](les\\\
    chat_client_sample.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from datetime\
    \ import datetime\n\n   from azure.communication.identity import CommunicationUserIdentifier\n\
    \   from azure.communication.identity._shared.user_credential import CommunicationTokenCredential\n\
    \   from azure.communication.chat._shared.user_token_refresh_options import CommunicationTokenRefreshOptions\n\
    \n   from azure.communication.chat import(\n       ChatClient,\n       ChatThreadParticipant\n\
    \   )\n\n   refresh_options = CommunicationTokenRefreshOptions(self.token)\n \
    \  chat_client = ChatClient(self.endpoint, CommunicationTokenCredential(refresh_options))\n\
    \n   topic = \"test topic\"\n   participants = [ChatThreadParticipant(\n     \
    \  user=self.user,\n       display_name='name',\n       share_history_time=datetime.utcnow()\n\
    \   )]\n\n   # creates a new chat_thread everytime\n   create_chat_thread_result\
    \ = chat_client.create_chat_thread(topic, thread_participants=participants)\n\n\
    \   # creates a new chat_thread if not exists\n   repeatability_request_id = 'b66d6031-fdcc-41df-8306-e524c9f226b8'\
    \ # unique identifier\n   create_chat_thread_result_w_repeatability_id = chat_client.create_chat_thread(\n\
    \       topic,\n       thread_participants=participants,\n       repeatability_request_id=repeatability_request_id\n\
    \   )\n\n   ````\n"
- uid: azure.communication.chat.ChatClient.delete_chat_thread
  name: delete_chat_thread
  summary: Deletes a thread.
  signature: delete_chat_thread(thread_id, **kwargs)
  parameters:
  - name: thread_id
    description: Required. Thread id to delete.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: None
    types:
    - <xref:None>
  examples:
  - "deleting chat thread.<!--[!code-python[Main](les\\chat_client_sample.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\26\\\\\
    azure-communication-chat-1.0.0b5\\\\samples\\\\chat_client_sample.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatClient\n   from azure.communication.identity._shared.user_credential\
    \ import CommunicationTokenCredential\n   from azure.communication.chat._shared.user_token_refresh_options\
    \ import CommunicationTokenRefreshOptions\n\n   refresh_options = CommunicationTokenRefreshOptions(self.token)\n\
    \   chat_client = ChatClient(self.endpoint, CommunicationTokenCredential(refresh_options))\n\
    \   chat_client.delete_chat_thread(self._thread_id)\n\n   ````\n"
- uid: azure.communication.chat.ChatClient.get_chat_thread
  name: get_chat_thread
  summary: Gets a chat thread.
  signature: get_chat_thread(thread_id, **kwargs)
  parameters:
  - name: thread_id
    description: Required. Thread id to get.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatThread
    types:
    - <xref:azure.communication.chat.ChatThread>
  examples:
  - "Getting a chat thread by thread id.<!--[!code-python[Main](les\\chat_client_sample.py\
    \ )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"\
    dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\
    \\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatClient\n   from azure.communication.identity._shared.user_credential\
    \ import CommunicationTokenCredential\n   from azure.communication.chat._shared.user_token_refresh_options\
    \ import CommunicationTokenRefreshOptions\n\n   refresh_options = CommunicationTokenRefreshOptions(self.token)\n\
    \   chat_client = ChatClient(self.endpoint, CommunicationTokenCredential(refresh_options))\n\
    \   chat_thread = chat_client.get_chat_thread(self._thread_id)\n\n   ````\n"
- uid: azure.communication.chat.ChatClient.get_chat_thread_client
  name: get_chat_thread_client
  summary: Get ChatThreadClient by providing a thread_id.
  signature: get_chat_thread_client(thread_id, **kwargs)
  parameters:
  - name: thread_id
    description: Required. The thread id.
    isRequired: true
    types:
    - <xref:str>
  return:
    description: ChatThreadClient
    types:
    - <xref:azure.communication.chat.ChatThreadClient>
  examples:
  - "Creating the ChatThreadClient from an existing chat thread id.<!--[!code-python[Main](les\\\
    chat_client_sample.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\26\\\\azure-communication-chat-1.0.0b5\\\\samples\\\\chat_client_sample.py\"\
    , \"xml:space\": \"preserve\", \"language\": \"python\", \"linenos\": false, \"\
    highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatClient\n   from azure.communication.identity._shared.user_credential\
    \ import CommunicationTokenCredential\n   from azure.communication.chat._shared.user_token_refresh_options\
    \ import CommunicationTokenRefreshOptions\n\n   refresh_options = CommunicationTokenRefreshOptions(self.token)\n\
    \   chat_client = ChatClient(self.endpoint, CommunicationTokenCredential(refresh_options))\n\
    \   chat_thread_client = chat_client.get_chat_thread_client(self._thread_id)\n\
    \n   ````\n"
- uid: azure.communication.chat.ChatClient.list_chat_threads
  name: list_chat_threads
  summary: Gets the list of chat threads of a user.
  signature: list_chat_threads(**kwargs)
  parameters:
  - name: results_per_page
    description: The maximum number of chat threads returned per page.
    types:
    - <xref:int>
  - name: start_time
    description: The earliest point in time to get chat threads up to.
    types:
    - <xref:datetime.datetime>
  return:
    description: An iterator like instance of ChatThreadInfo
    types:
    - <xref:azure.core.paging.ItemPaged>[<xref:azure.communication.chat.ChatThreadInfo>]
  examples:
  - "listing chat threads.<!--[!code-python[Main](les\\chat_client_sample.py )]-->\n\
    \n<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\26\\\\\
    azure-communication-chat-1.0.0b5\\\\samples\\\\chat_client_sample.py\", \"xml:space\"\
    : \"preserve\", \"language\": \"python\", \"linenos\": false, \"highlight_args\"\
    : {\"linenostart\": 1}} -->\n\n````python\n\n   from azure.communication.chat\
    \ import ChatClient\n   from azure.communication.identity._shared.user_credential\
    \ import CommunicationTokenCredential\n   from azure.communication.chat._shared.user_token_refresh_options\
    \ import CommunicationTokenRefreshOptions\n   from datetime import datetime, timedelta\n\
    \   import pytz\n\n   refresh_options = CommunicationTokenRefreshOptions(self.token)\n\
    \   chat_client = ChatClient(self.endpoint, CommunicationTokenCredential(refresh_options))\n\
    \   start_time = datetime.utcnow() - timedelta(days=2)\n   start_time = start_time.replace(tzinfo=pytz.utc)\n\
    \   chat_thread_infos = chat_client.list_chat_threads(results_per_page=5, start_time=start_time)\n\
    \n   print(\"list_threads succeeded with results_per_page is 5, and were created\
    \ since 2 days ago.\")\n   for chat_thread_info_page in chat_thread_infos.by_page():\n\
    \       for chat_thread_info in chat_thread_info_page:\n           print(\"thread\
    \ id:\", chat_thread_info.id)\n\n   ````\n"
