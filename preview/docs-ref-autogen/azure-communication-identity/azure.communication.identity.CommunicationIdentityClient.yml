### YamlMime:PythonClass
uid: azure.communication.identity.CommunicationIdentityClient
name: CommunicationIdentityClient
fullName: azure.communication.identity.CommunicationIdentityClient
module: azure.communication.identity
inheritances:
- builtins.object
summary: Azure Communication Services Identity client.
constructor:
  syntax: CommunicationIdentityClient(endpoint, credential, **kwargs)
  parameters:
  - name: endpoint
    description: The endpoint url for Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  - name: credential
    description: The TokenCredential we use to authenticate against the service.
    isRequired: true
    types:
    - <xref:TokenCredential>
examples:
- "<!--[!code-python[Main](les\\identity_samples.py )]-->\n\n<!-- literal_block {\"\
  ids\": [], \"classes\": [], \"names\": [], \"dupnames\": [], \"backrefs\": [], \"\
  source\": \"D:\\\\a\\\\1\\\\s\\\\dist_temp\\\\126\\\\azure-communication-identity-1.0.0b5\\\
  \\samples\\\\identity_samples.py\", \"xml:space\": \"preserve\", \"language\": \"\
  python\", \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n\
  ````python\n\n   : utf-8\n\n   -------------------------------------------------------------------\n\
  \   ght (c) Microsoft Corporation. All rights reserved.\n   ed under the MIT License.\
  \ See License.txt in the project root for\n   e information.\n   --------------------------------------------------------------------\n\
  \n\n   entity_sample.py\n   ION:\n   e samples demonstrate creating a user, issuing\
  \ a token, revoking a token and deleting a user.\n\n   uthenticating a client via\
  \ a connection string\n\n   on identity_samples.py\n   the environment variables\
  \ with your own values before running the sample:\n   ZURE_COMMUNICATION_SERVICE_ENDPOINT\
  \ - Communication Service endpoint url\n\n   s\n\n   mmunicationIdentityClientSamples(object):\n\
  \n   __init__(self):\n   self.connection_string = os.getenv('AZURE_COMMUNICATION_SERVICE_CONNECTION_STRING')\n\
  \   self.endpoint = os.getenv('AZURE_COMMUNICATION_SERVICE_ENDPOINT')\n   self.client_id\
  \ = os.getenv('AZURE_CLIENT_ID')\n   self.client_secret = os.getenv('AZURE_CLIENT_SECRET')\n\
  \   self.tenant_id = os.getenv('AZURE_TENANT_ID')\n\n   get_token(self):\n   from\
  \ azure.communication.identity import (\n       CommunicationIdentityClient,\n \
  \      CommunicationTokenScope\n   )\n\n   if self.client_id is not None and self.client_secret\
  \ is not None and self.tenant_id is not None:\n       from azure.identity import\
  \ DefaultAzureCredential\n       identity_client = CommunicationIdentityClient(self.endpoint,\
  \ DefaultAzureCredential())\n   else:\n       identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n\
  \   user = identity_client.create_user()\n   print(\"Getting token for: \" + user.identifier)\n\
  \   tokenresponse = identity_client.get_token(user, scopes=[CommunicationTokenScope.CHAT])\n\
  \   print(\"Token issued with value: \" + tokenresponse.token)\n\n   revoke_tokens(self):\n\
  \   from azure.communication.identity import (\n       CommunicationIdentityClient,\n\
  \       CommunicationTokenScope\n   )\n\n   if self.client_id is not None and self.client_secret\
  \ is not None and self.tenant_id is not None:\n       from azure.identity import\
  \ DefaultAzureCredential\n       identity_client = CommunicationIdentityClient(self.endpoint,\
  \ DefaultAzureCredential())\n   else:\n       identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n\
  \   user = identity_client.create_user()\n   tokenresponse = identity_client.get_token(user,\
  \ scopes=[CommunicationTokenScope.CHAT])\n   print(\"Revoking token: \" + tokenresponse.token)\n\
  \   identity_client.revoke_tokens(user)\n   print(tokenresponse.token + \" revoked\
  \ successfully\")\n\n   create_user(self):\n   from azure.communication.identity\
  \ import CommunicationIdentityClient\n\n   if self.client_id is not None and self.client_secret\
  \ is not None and self.tenant_id is not None:\n       from azure.identity import\
  \ DefaultAzureCredential\n       identity_client = CommunicationIdentityClient(self.endpoint,\
  \ DefaultAzureCredential())\n   else:\n       identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n\
  \   print(\"Creating new user\")\n   user = identity_client.create_user()\n   print(\"\
  User created with id:\" + user.identifier)\n\n   create_user_and_token(self):\n\
  \   from azure.communication.identity import (\n       CommunicationIdentityClient,\n\
  \       CommunicationTokenScope\n   )\n   if self.client_id is not None and self.client_secret\
  \ is not None and self.tenant_id is not None:\n       from azure.identity import\
  \ DefaultAzureCredential\n       identity_client = CommunicationIdentityClient(self.endpoint,\
  \ DefaultAzureCredential())\n   else:\n       identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n\
  \   print(\"Creating new user with token\")\n   user, tokenresponse = identity_client.create_user_and_token(scopes=[CommunicationTokenScope.CHAT])\n\
  \   print(\"User created with id:\" + user.identifier)\n   print(\"Token issued\
  \ with value: \" + tokenresponse.token)\n\n   delete_user(self):\n   from azure.communication.identity\
  \ import CommunicationIdentityClient\n\n   if self.client_id is not None and self.client_secret\
  \ is not None and self.tenant_id is not None:\n       from azure.identity import\
  \ DefaultAzureCredential\n       identity_client = CommunicationIdentityClient(self.endpoint,\
  \ DefaultAzureCredential())\n   else:\n       identity_client = CommunicationIdentityClient.from_connection_string(self.connection_string)\n\
  \   user = identity_client.create_user()\n   print(\"Deleting user: \" + user.identifier)\n\
  \   identity_client.delete_user(user)\n   print(user.identifier + \" deleted\")\n\
  \n   e__ == '__main__':\n   le = CommunicationIdentityClientSamples()\n   le.create_user()\n\
  \   le.create_user_and_token()\n   le.get_token()\n   le.revoke_tokens()\n   le.delete_user()\n\
  \n   ````\n"
methods:
- uid: azure.communication.identity.CommunicationIdentityClient.create_user
  name: create_user
  summary: create a single Communication user
  signature: create_user(**kwargs)
  return:
    description: CommunicationUserIdentifier
    types:
    - <xref:azure.communication.identity.CommunicationUserIdentifier>
- uid: azure.communication.identity.CommunicationIdentityClient.create_user_and_token
  name: create_user_and_token
  summary: "create a single Communication user with an identity token.\n:param scopes:\n\
    \n\n   List of scopes to be added to the token."
  signature: create_user_and_token(scopes, **kwargs)
  return:
    description: A tuple of a CommunicationUserIdentifier and a AccessToken.
    types:
    - <xref:tuple of >(<xref:azure.communication.identity.CommunicationUserIdentifier>,
      <xref:azure.core.credentials.AccessToken>)
- uid: azure.communication.identity.CommunicationIdentityClient.delete_user
  name: delete_user
  summary: Triggers revocation event for user and deletes all its data.
  signature: delete_user(communication_user, **kwargs)
  parameters:
  - name: communication_user
    description: Azure Communication User to delete
    isRequired: true
    types:
    - <xref:azure.communication.identity.CommunicationUserIdentifier>
  return:
    description: None
    types:
    - <xref:None>
- uid: azure.communication.identity.CommunicationIdentityClient.from_connection_string
  name: from_connection_string
  summary: Create CommunicationIdentityClient from a Connection String.
  signature: from_connection_string(conn_str, **kwargs)
  parameters:
  - name: conn_str
    description: A connection string to an Azure Communication Service resource.
    isRequired: true
    types:
    - <xref:str>
  - name: conn_str
    isRequired: true
  return:
    description: Instance of CommunicationIdentityClient.
    types:
    - <xref:azure.communication.identity.CommunicationIdentityClient>
  examples:
  - "Creating the CommunicationIdentityClient from a connection string.<!--[!code-python[Main](les\\\
    identity_samples.py )]-->\n\n<!-- literal_block {\"ids\": [], \"classes\": [],\
    \ \"names\": [], \"dupnames\": [], \"backrefs\": [], \"source\": \"D:\\\\a\\\\\
    1\\\\s\\\\dist_temp\\\\126\\\\azure-communication-identity-1.0.0b5\\\\samples\\\
    \\identity_samples.py\", \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {\"linenostart\": 1}} -->\n\n````python\n\
    \n\n   ````\n"
- uid: azure.communication.identity.CommunicationIdentityClient.get_token
  name: get_token
  summary: Generates a new token for an identity.
  signature: get_token(user, scopes, **kwargs)
  parameters:
  - name: user
    description: Azure Communication User
    isRequired: true
    types:
    - <xref:azure.communication.identity.CommunicationUserIdentifier>
  - name: scopes
    description: List of scopes to be added to the token.
    isRequired: true
    types:
    - <xref:list>[<xref:str>
    - <xref:azure.communication.identity.models.CommunicationTokenScope>]
  return:
    description: AccessToken
    types:
    - <xref:azure.core.credentials.AccessToken>
- uid: azure.communication.identity.CommunicationIdentityClient.revoke_tokens
  name: revoke_tokens
  summary: Schedule revocation of all tokens of an identity.
  signature: revoke_tokens(user, **kwargs)
  parameters:
  - name: user
    description: Azure Communication User.
    isRequired: true
    types:
    - <xref:azure.communication.identity.CommunicationUserIdentifier.>
  return:
    description: None
    types:
    - <xref:None>
